import numpy as np
import matplotlib.pyplot as plt
import math

# 1. C√ÅLCULO DAS PROBABILIDADES TE√ìRICAS
# ===============================================
print("=" * 70)
print("üé∞ COMPARA√á√ÉO: MEGA-SENA vs MEGA DA VIRADA")
print("=" * 70)

# Fun√ß√£o para calcular combina√ß√µes (n choose k)
def combinacao(n, k):
    return math.comb(n, k)

# Probabilidade da Mega-Sena (6 n√∫meros entre 60)
numeros_mega = 60
escolher_mega = 6
combinacoes_mega = combinacao(numeros_mega, escolher_mega)
probabilidade_mega = 1 / combinacoes_mega

# Probabilidade da Mega da Virada (6 n√∫meros entre 50 + 2 estrelas entre 5)
numeros_virada = 50
escolher_virada = 6
estrelas_virada = 5
escolher_estrelas = 2

combinacoes_numeros = combinacao(numeros_virada, escolher_virada)
combinacoes_estrelas = combinacao(estrelas_virada, escolher_estrelas)
combinacoes_total_virada = combinacoes_numeros * combinacoes_estrelas
probabilidade_virada = 1 / combinacoes_total_virada

print("üìä PROBABILIDADES TE√ìRICAS:")
print(f"üéØ MEGA-SENA: 1 chance em {combinacoes_mega:,}")
print(f"   ‚Üí Probabilidade: {probabilidade_mega:.15f}")
print(f"   ‚Üí Nota√ß√£o cient√≠fica: {probabilidade_mega:.2e}")

print(f"\nüéÑ MEGA DA VIRADA: 1 chance em {combinacoes_total_virada:,}")
print(f"   ‚Üí Probabilidade: {probabilidade_virada:.15f}")
print(f"   ‚Üí Nota√ß√£o cient√≠fica: {probabilidade_virada:.2e}")

# 2. COMPARA√á√ÉO RELATIVA
# ===============================================
print("\n" + "=" * 70)
print("üìà COMPARA√á√ÉO RELATIVA")
print("=" * 70)

razao = probabilidade_mega / probabilidade_virada
diferenca_ordem_magnitude = math.log10(probabilidade_mega) - math.log10(probabilidade_virada)

print(f"üîç A Mega-Sena √© {razao:,.1f} vezes MAIS PROV√ÅVEL que a Mega da Virada!")
print(f"üìè Diferen√ßa de {abs(diferenca_ordem_magnitude):.1f} ordens de magnitude")

# 3. SIMULA√á√ÉO (LEI DOS GRANDES N√öMEROS)
# ===============================================
print("\n" + "=" * 70)
print("üé≤ SIMULA√á√ÉO - LEI DOS GRANDES N√öMEROS")
print("=" * 70)

np.random.seed(42)
n_simulacoes = 1000000  # 1 milh√£o de tentativas

print(f"Simulando {n_simulacoes:,} tentativas de cada loteria...")

# Simula√ß√£o Mega-Sena
acertos_mega = 0
for i in range(n_simulacoes):
    # Gera jogo sorteado (6 n√∫meros entre 1-60)
    sorteado_mega = np.random.choice(range(1, 61), size=6, replace=False)
    # Gera jogo do apostador
    aposta_mega = np.random.choice(range(1, 61), size=6, replace=False)
    # Verifica se acertou todos os n√∫meros
    if set(aposta_mega) == set(sorteado_mega):
        acertos_mega += 1

prob_empirica_mega = acertos_mega / n_simulacoes

# Simula√ß√£o Mega da Virada (simplificada - apenas os n√∫meros principais)
acertos_virada = 0
for i in range(n_simulacoes):
    # Gera jogo sorteado (6 n√∫meros entre 1-50)
    sorteado_virada = np.random.choice(range(1, 51), size=6, replace=False)
    # Gera jogo do apostador
    aposta_virada = np.random.choice(range(1, 51), size=6, replace=False)
    # Verifica se acertou todos os n√∫meros (ignorando estrelas para simplificar)
    if set(aposta_virada) == set(sorteado_virada):
        acertos_virada += 1

prob_empirica_virada = acertos_virada / n_simulacoes

print(f"‚úÖ Mega-Sena - Acertos: {acertos_mega} ‚Üí Probabilidade: {prob_empirica_mega:.8f}")
print(f"‚úÖ Mega Virada - Acertos: {acertos_virada} ‚Üí Probabilidade: {prob_empirica_virada:.8f}")

# 4. VISUALIZA√á√ÉO GR√ÅFICA
# ===============================================
print("\n" + "=" * 70)
print("üìä VISUALIZA√á√ÉO GR√ÅFICA")
print("=" * 70)

plt.figure(figsize=(15, 10))

# Gr√°fico 1: Compara√ß√£o de probabilidades
plt.subplot(2, 2, 1)
loterias = ['Mega-Sena', 'Mega da Virada']
probabilidades = [probabilidade_mega, probabilidade_virada]

bars = plt.bar(loterias, probabilidades, color=['blue', 'red'], alpha=0.7)
plt.ylabel('Probabilidade')
plt.title('Compara√ß√£o de Probabilidades\n(Escala Linear)')
plt.yscale('log')  # Escala logar√≠tmica para melhor visualiza√ß√£o

# Adicionar valores nas barras
for bar, prob in zip(bars, probabilidades):
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height, f'{prob:.1e}', 
             ha='center', va='bottom', fontweight='bold')

# Gr√°fico 2: Compara√ß√£o em escala logar√≠tmica
plt.subplot(2, 2, 2)
plt.bar(loterias, probabilidades, color=['blue', 'red'], alpha=0.7)
plt.ylabel('Probabilidade (log)')
plt.title('Compara√ß√£o em Escala Logar√≠tmica')
plt.yscale('log')

# Gr√°fico 3: N√∫mero de combina√ß√µes poss√≠veis
plt.subplot(2, 2, 3)
combinacoes = [combinacoes_mega, combinacoes_total_virada]
bars = plt.bar(loterias, combinacoes, color=['lightblue', 'lightcoral'], alpha=0.7)
plt.ylabel('N√∫mero de Combina√ß√µes')
plt.title('Combina√ß√µes Poss√≠veis')
plt.yscale('log')

# Adicionar valores nas barras
for bar, comb in zip(bars, combinacoes):
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height, f'{comb:,}', 
             ha='center', va='bottom', fontweight='bold', fontsize=8)

# Gr√°fico 4: Analogias para entender as probabilidades
plt.subplot(2, 2, 4)
analogias = [
    "Chance de ser atingido\npor um raio",
    "Mega-Sena",
    "Mega da Virada"
]
chances = [1/1500000, probabilidade_mega, probabilidade_virada]

plt.bar(analogias, chances, color=['gray', 'blue', 'red'], alpha=0.7)
plt.ylabel('Probabilidade')
plt.title('Compara√ß√£o com Analogias')
plt.yscale('log')
plt.xticks(rotation=15)

plt.tight_layout()
plt.show()

# 5. AN√ÅLISE ESTAT√çSTICA DETALHADA
# ===============================================
print("\n" + "=" * 70)
print("üìã AN√ÅLISE ESTAT√çSTICA DETALHADA")
print("=" * 70)

print("üéØ MEGA-SENA:")
print(f"   ‚Ä¢ Combina√ß√µes poss√≠veis: {combinacoes_mega:,}")
print(f"   ‚Ä¢ Probabilidade: 1 em {combinacoes_mega:,}")
print(f"   ‚Ä¢ Nota√ß√£o cient√≠fica: {probabilidade_mega:.2e}")

print(f"\nüéÑ MEGA DA VIRADA:")
print(f"   ‚Ä¢ Combina√ß√µes de n√∫meros: {combinacoes_numeros:,}")
print(f"   ‚Ä¢ Combina√ß√µes de estrelas: {combinacoes_estrelas:,}")
print(f"   ‚Ä¢ Total combina√ß√µes: {combinacoes_total_virada:,}")
print(f"   ‚Ä¢ Probabilidade: 1 em {combinacoes_total_virada:,}")
print(f"   ‚Ä¢ Nota√ß√£o cient√≠fica: {probabilidade_virada:.2e}")

print(f"\n‚öñÔ∏è  COMPARA√á√ÉO:")
print(f"   ‚Ä¢ Raz√£o Mega-Sena/Mega-Virada: {razao:,.1f}√ó")
print(f"   ‚Ä¢ A Mega-Sena √© {razao:,.0f} vezes mais prov√°vel!")

# 6. PERSPECTIVAS PR√ÅTICAS
# ===============================================
print("\n" + "=" * 70)
print("üí° PERSPECTIVAS PR√ÅTICAS")
print("=" * 70)

# Quantos anos levaria para apostar todas as combina√ß√µes
apostas_por_ano = 365  # Apostando todo dia
anos_mega = combinacoes_mega / apostas_por_ano
anos_virada = combinacoes_total_virada / apostas_por_ano

print("‚è∞ Tempo para apostar TODAS as combina√ß√µes (1 aposta por dia):")
print(f"   Mega-Sena: {anos_mega:,.0f} anos (‚âà {anos_mega/1000:,.1f} mil√™nios)")
print(f"   Mega Virada: {anos_virada:,.0f} anos (‚âà {anos_virada/1000000:,.1f} milh√µes de anos)")

print(f"\nüåå Contexto c√≥smico:")
print(f"   ‚Ä¢ Idade do Universo: ‚âà 13.8 bilh√µes de anos")
print(f"   ‚Ä¢ Mega-Sena: {anos_mega/13800000000:.3f}√ó a idade do universo")
print(f"   ‚Ä¢ Mega Virada: {anos_virada/13800000000:.1f}√ó a idade do universo")

# 7. CONCLUS√ÉO
# ===============================================
print("\n" + "=" * 70)
print("üéØ CONCLUS√ÉO")
print("=" * 70)

print("üìä RESULTADOS DA SIMULA√á√ÉO:")
print(f"   Mega-Sena: {acertos_mega} acertos em {n_simulacoes:,} tentativas")
print(f"   Mega Virada: {acertos_virada} acertos em {n_simulacoes:,} tentativas")

print(f"\n‚úÖ A Mega-Sena √© significativamente mais prov√°vel!")
print(f"   Fator: {razao:,.0f} vezes mais chances de ganhar")
print(f"\nüí° LEMBRETE: Ambas as probabilidades s√£o EXTREMAMENTE BAIXAS!")
print("   Jogue com responsabilidade! üé≤")